<!-- Partial Template: TestUnit.Partials.TplSyntaxTest -->
	<style>
		li.sf__test__ul__tpl__features:hover, span.sf__test__notice:hover {
			color: #FF3300 !important;
		}
	</style>
	<h1 style="display:inline;">Powerful Templating Engine: Marker-TPL (built-in, default):</h1>
	<div align="right">
	<a href="?/page/samples.templating-test" target="testunit_tpl_test" data-smart="open.modal" class="ux-button ux-button-regular" title="Marker-TPL Engine is the default, built-in Templating Engine in Smart.Framework"><i class="fa fa-fire"></i> &nbsp; Marker-TPL Templating Demo</a>
	[%%%%IF:TWIG-AVAILABLE:==yes;%%%%]
	&nbsp;&nbsp;
	<a href="?/page/tpl-twig.test" target="testunit_twig_test" data-smart="open.modal" class="ux-button ux-button-info" title="Twig Templating Engine is available as an extra module for Smart.Framework and can be used as an alternative to the Marker-TPL Templating Engine"><i class="fa fa-fire"></i> &nbsp; Twig Templating Demo (extra modules)</a>
	[%%%%/IF:TWIG-AVAILABLE%%%%]
	</div>
	<div>
	<b>Marker-TPL Templating Engine is a very fast and <span class="sf__test__notice" style="color:#333333; cursor:help;" title="If used correctly and all escapes are applied as required ...">100% secure<sup> [*] </sup></span> PHP Templating Engine</b>.<br><b><i>Because the Marker-TPL Templating is rendering the Views by injecting plain strings and data arrays directly into these Views (no PHP code, no re-interpreted PHP code) there is NO SECURITY RISK by injecting malicious PHP code into the Views</i></b> like in the case of using the <a class="ux-link" target="twig_reference_tpl" data-smart="open.popup" href="https://twig.sensiolabs.org">Twig Templating for PHP</a> or <a class="ux-link" target="smarty_reference_tpl" data-smart="open.popup" href="http://www.smarty.net">Smarty Templating for PHP</a>. The original concept of <b>Marker-TPL Templating</b> started by looking at the <a class="ux-link" href="https://docs.typo3.org/typo3cms/TemplatingTutorial/Tasks/WorkingHTML/HtmlTemplate/Index.html" target="typo3_reference_markers" data-smart="open.popup">simplistic mark(er)s used in templates by Typo3 CMS</a>. So, a full new concept was developed based on this idea into the Smart.Framework as a brand new TPL engine.<br>
	The Marker-TPL Templating sub-project of Smart.Framework begins by using markers that have a start [ and stop ] limits and marking variables are enclosed in 4 # # # # (instead of 3 # # # as the original concept). At the very begining the full escaping syntax was developed for these markers to escape: html, js, url, json, ... and more ... and was added a support for loading SUB-TEMPLATES files. Later the support for IF and LOOP syntax was finalizing this concept.<br>
	Currently the <b>TPL Marker Syntax Templating Engine for PHP (and TPL Marker Syntax Templating Engine for Javascript [**])</b> fully developed and maintained into Smart.Framework supports:
	[####TPL-SYNTAX-DESCR####]
	<span style="color:#778899;"><b>NOTICE: For those that prefer using the Twig Templating Engine syntax instead of using the Marker-TPL Templating syntax into the Smart.Framework, it is possible to do that by loading an extra module available in Smart.Framework.Modules: mod-tpl-twig ! Or more it is possible to load other Templating Engines by creating custom modules as the Smart.Framework is very flexible and extensible.</b></span>
	</div>
	<br>
	<table class="ux-table" style="width:595px;">
		<tr style="background:#778899; color:#FFFFFF;">
			<th colspan="3" align="center">
				TPL Test: Markers Templating Render - Basic Syntax
			</th>
		</tr>
	[%%%%LOOP:LOOPTEST-VAR1%%%%]
		[%%%%IF:IF2TEST:!=5;%%%%]
		<tr style="background:[%%%%IF:IFTEST:==1;%%%%]#666699[%%%%ELSE:IFTEST%%%%]#003366[%%%%/IF:IFTEST%%%%]; color:#FFFFFF;" title="This line is displayed conditional using a templating IF syntax ; Values = [[####IFTEST|html####]] / [[####IF2TEST|html####]] ...">
		[%%%%ELSE:IF2TEST%%%%]
		<tr style="background:#FFCC00; color:#000000;" title="This line is displayed conditional using a templating IF syntax ; Values = [[####IFTEST|html####]] / [[####IF2TEST|html####]] ...">
		[%%%%/IF:IF2TEST%%%%]
			<td width="33%">[####LOOPTEST-VAR1.D1|html####]</td>
			<td width="33%">[####LOOPTEST-VAR1.D2|html####]</td>
			<td width="33%">[####LOOPTEST-VAR1.D3|html####]</td>
		</tr>
	[%%%%/LOOP:LOOPTEST-VAR1%%%%]
	</table>
	<table class="ux-table ux-table-striped" style="width:595px;">
	[%%%%LOOP:LOOPTEST-VAR2%%%%]
		<tr>
			[%%%%IF:LOOPTEST-VAR2.C2:==a;%%%%]
				[%%%%IF:LOOPTEST-VAR2.C1:<1;%%%%]
					<td width="33%" style="color:#FF3300;">[####LOOPTEST-VAR2.C1|html####] [ &lt; 1 ; C2 = a ]</td>
				[%%%%ELSE:LOOPTEST-VAR2.C1%%%%]
					<td width="33%" style="color:#003399;">[####LOOPTEST-VAR2.C1|html####] [ &gt;= 1 ; C2 = a ]</td>
				[%%%%/IF:LOOPTEST-VAR2.C1%%%%]
			[%%%%ELSE:LOOPTEST-VAR2.C2%%%%]
				<td width="33%">[####LOOPTEST-VAR2.C1|html####]</td>
			[%%%%/IF:LOOPTEST-VAR2.C2%%%%]
			<td width="33%">[####LOOPTEST-VAR2.C2|js|html####]</td>
			<td width="33%">[####LOOPTEST-VAR2.C3|url|html####]</td>
		</tr>
	[%%%%/LOOP:LOOPTEST-VAR2%%%%]
	</table>
	<table class="ux-table" style="width:595px;">
		<tr align="center">
			<td>[####STR-NUM|num####] * [####NUM-NUM|num####] (Numeric Escape)</td>
		</tr>
	</table>
<!-- #END# Partial Template: TestUnit.Partials.TplSyntaxTest -->